{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","containers/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","alt","src","CardList","map","user","i","key","ErrorBoundary","state","hasError","this","setState","props","children","React","Component","Scroll","style","overflowY","border","height","SearchBox","searchChange","type","placeholder","onChange","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2394aa90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    // return {...state, searchField: action.payload }\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}${name}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import Card from \"./Card.js\";\nimport React from \"react\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import \"./Scroll.css\";\n\nimport React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"3px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import \"./App.css\";\n\nimport { requestRobots, setSearchField } from \"../actions.js\";\n\nimport CardList from \"../components/CardList.js\";\nimport ErrorBoundary from \"./ErrorBoundary.js\";\nimport React from \"react\";\nimport Scroll from \"../components/Scroll.js\";\nimport SearchBox from \"../components/SearchBox.js\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (isPending) {\n      return <h1 className=\"tc f1\">Loading...</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FALIED\";\n","import \"./index.css\";\nimport \"tachyons\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { requestRobots, searchRobots } from \"./reducers\";\n\nimport App from \"./containers/App.js\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}